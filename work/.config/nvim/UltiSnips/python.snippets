# python standard debugger
snippet pdb
import pdb; pdb.set_trace()  # noqa pylint: disable=all
endsnippet

# ipython based debugger
snippet ipdb
import ipdb; ipdb.set_trace()
endsnippet

# ipython embedded console
snippet ipy
from IPython import embed; embed()
endsnippet

# not implemented test
snippet skiptest
from nose import SkipTest; raise SkipTest()
endsnippet

snippet script
#!/usr/bin/env python3

import argparse
import sys
from datetime import datetime
from functools import partial


def list_all_command(args):
    print("list all")


def help(parser: argparse.ArgumentParser, args):
    parser.print_help()


def main():
    parser = argparse.ArgumentParser("imdb")
    parser.set_defaults(callback=partial(help, parser))
    subparsers = parser.add_subparsers(dest="commands")

    list_parser = subparsers.add_parser("list")
    list_parser.set_defaults(callback=partial(help, list_parser))
    list_subparsers = list_parser.add_subparsers(title="subcommands")

    list_all_parser = list_subparsers.add_parser("all")
    list_all_parser.set_defaults(callback=list_all_command)

    args = parser.parse_args()
    result = args.callback(args)
    sys.exit(0 if not result else result)


if __name__ == "__main__":
    main()
endsnippet

snippet logger
logger = logging.getLogger(__name__)
endsnippet

snippet tests
from unittest.mock import Mock, patch

import pytest
from hamcrest import assert_that, is_, none


@pytest.fixture
def my_fixture():
    pass


class TestInstances:
    def test_it_should_do_stuff(self, my_fixture):
        assert_that(None, is_(none()))
endsnippet
